---
apiVersion: v1
kind: ConfigMap
metadata:
  name: splunk-kubernetes-logging-win
  namespace: fluentd
  labels:
    app: splunk-kubernetes-logging-win
    version: 1.2.0
data:
  fluent.conf: |-
    @include system.conf
    @include source.containers.conf
    @include source.files.conf
    @include source.journald.conf
    @include monit.conf
    @include output.conf
  system.conf: |-
    # system wide configurations
    <system>
      log_level info
      root_dir /tmp/fluentd
    </system>
  source.containers.conf: |-
    # This configuration file for Fluentd / td-agent is used
    # to watch changes to Docker log files. The kubelet creates symlinks that
    # capture the pod name, namespace, container name & Docker container ID
    # to the docker logs for pods in the /var/log/containers directory on the host.
    # If running this fluentd configuration in a Docker container, the /var/log
    # directory should be mounted in the container.
    #
    # Reference:
    # https://github.com/kubernetes/community/blob/20d2f6f5498a5668bae2aea9dcaf4875b9c06ccb/contributors/design-proposals/node/kubelet-cri-logging.md
    #
    # Json Log Example:
    # {"log":"[info:2016-02-16T16:04:05.930-08:00] Some log text here\n","stream":"stdout","time":"2016-02-17T00:04:05.931087621Z"}
    # CRI Log Example (not supported):
    # 2016-02-17T00:04:05.931087621Z stdout [info:2016-02-16T16:04:05.930-08:00] Some log text here
    <source>
      @id containers.log
      @type tail
      @label @SPLUNK
      tag tail.containers.*
      path C:/var/log/containers/*.log
      pos_file C:/var/log/splunk-fluentd-containers.log.pos
      path_key source
      read_from_head true
      <parse>
        @type json
        time_key time
        time_type string
        time_format %Y-%m-%dT%H:%M:%S.%NZ
        localtime false
      </parse>
    </source>
  source.files.conf: |-
    # This fluentd conf file contains sources for log files other than container logs.
    # On windows, the kubelet, kube-proxy and flanneld run as native processes and log to files
    <source>
      @id file-kubelet
      @type tail
      @label @SPLUNK
      tag file.kube:kubelet
      path C:/var/log/kubelet*.log
      pos_file C:/var/log/splunk-fluentd-kubelet.log.pos
      path_key source
      read_from_head true
      <parse>
        @type multiline
        format_firstline /^\w\d{4}/
        format1 /^(?<severity>\w)(?<logtime>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<file>[^ \]]+)\] (?<message>.*)/
        time_key time
        time_type string
        time_format %m%d %H:%M:%S.%N
        localtime false
        keep_time_key true
      </parse>
    </source>
    <source>
      @id file-kube-proxy
      @type tail
      @label @SPLUNK
      tag file.kube:kube-proxy
      path C:/var/log/kube-proxy*.log
      pos_file C:/var/log/splunk-fluentd-kube-proxy.log.pos
      path_key source
      read_from_head true
      <parse>
        @type multiline
        format_firstline /^\w\d{4}/
        format1 /^(?<severity>\w)(?<logtime>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<file>[^ \]]+)\] (?<message>.*)/
        time_key time
        time_type string
        time_format %m%d %H:%M:%S.%N
        localtime false
        keep_time_key true
      </parse>
    </source>
    <source>
      @id file-flanneld
      @type tail
      @label @SPLUNK
      tag file.kube:flanneld
      path C:/var/log/flanneld*.log
      pos_file C:/var/log/splunk-fluentd-flanneld.log.pos
      path_key source
      read_from_head true
      <parse>
        @type multiline
        format_firstline /^\w\d{4}/
        format1 /^(?<severity>\w)(?<logtime>\d{4} [^\s]*)\s+(?<pid>\d+)\s+(?<file>[^ \]]+)\] (?<message>.*)/
        time_key time
        time_type string
        time_format %m%d %H:%M:%S.%N
        localtime false
        keep_time_key true
      </parse>
    </source>
  source.journald.conf: |-
    # This fluentd conf file contains configurations for reading logs from systemd journal.
  monit.conf: |-
    <source>
      @id fluentd-monitor-agent
      @type monitor_agent
      @label @SPLUNK
      tag monitor_agent
    </source>
  output.conf: |-
    <label @SPLUNK>
      # = filters for container logs =
      <filter tail.containers.C:.var.log.containers.dns-controller*dns-controller*.log>
        @type concat
        key log
        timeout_label @SPLUNK
        stream_identity_key stream
        multiline_start_regexp /^\w[0-1]\d[0-3]\d/
        flush_interval 5s
      </filter>
      <filter tail.containers.C:.var.log.containers.kube-dns*sidecar*.log>
        @type concat
        key log
        timeout_label @SPLUNK
        stream_identity_key stream
        multiline_start_regexp /^\w[0-1]\d[0-3]\d/
        flush_interval 5s
      </filter>
      <filter tail.containers.C:.var.log.containers.kube-dns*dnsmasq*.log>
        @type concat
        key log
        timeout_label @SPLUNK
        stream_identity_key stream
        multiline_start_regexp /^\w[0-1]\d[0-3]\d/
        flush_interval 5s
      </filter>
      <filter tail.containers.C:.var.log.containers.kube-apiserver*kube-apiserver*.log>
        @type concat
        key log
        timeout_label @SPLUNK
        stream_identity_key stream
        multiline_start_regexp /^\w[0-1]\d[0-3]\d/
        flush_interval 5s
      </filter>
      <filter tail.containers.C:.var.log.containers.kube-controller-manager*kube-controller-manager*.log>
        @type concat
        key log
        timeout_label @SPLUNK
        stream_identity_key stream
        multiline_start_regexp /^\w[0-1]\d[0-3]\d/
        flush_interval 5s
      </filter>
      <filter tail.containers.C:.var.log.containers.kube-dns-autoscaler*autoscaler*.log>
        @type concat
        key log
        timeout_label @SPLUNK
        stream_identity_key stream
        multiline_start_regexp /^\w[0-1]\d[0-3]\d/
        flush_interval 5s
      </filter>
      <filter tail.containers.C:.var.log.containers.kube-scheduler*kube-scheduler*.log>
        @type concat
        key log
        timeout_label @SPLUNK
        stream_identity_key stream
        multiline_start_regexp /^\w[0-1]\d[0-3]\d/
        flush_interval 5s
      </filter>
      <filter tail.containers.C:.var.log.containers.kube-dns*kubedns*.log>
        @type concat
        key log
        timeout_label @SPLUNK
        stream_identity_key stream
        multiline_start_regexp /^\w[0-1]\d[0-3]\d/
        flush_interval 5s
      </filter>
      <filter tail.containers.C:.var.log.containers.splunk-kubernetes-logging*splunk-fluentd-k8s*.log>
        @type concat
        key log
        timeout_label @SPLUNK
        stream_identity_key stream
        multiline_start_regexp /^\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2}/
        flush_interval 5s
      </filter>

      <filter tail.containers.**>
        @type record_transformer
        enable_ruby
        <record>
          pod ${record["source"].tap{|s| s.slice!("\\var\\log\\containers\\")}.split("_")[0]}
          namespace ${record["source"].tap{|s| s.slice!("\\var\\log\\containers\\")}.split("_")[1]}
          container_name ${record["source"].tap{|s| s.slice!("\\var\\log\\containers\\")}.split("_")[-1].split("-")[0..-2].join("-")}
          container_id ${record["source"].tap{|s| s.slice!("\\var\\log\\containers\\")}.split("_")[-1].split("-")[-1].chomp(".log")}
        </record>
      </filter>
      <filter tail.containers.**>
        @type record_transformer
        enable_ruby
        <record>
          sourcetype ${(case "#{record["container_name"]}/#{record["pod"]}"; when "dns-controller/dns-controller" then "kube:dns-controller"; when "sidecar/kube-dns" then "kube:kubedns-sidecar"; when "dnsmasq/kube-dns" then "kube:dnsmasq"; when "etcd-container/etcd-server" then "kube:etcd"; when "etcd-container/etcd-server-events" then "kube:etcd-events"; when "kube-apiserver/kube-apiserver" then "kube:kube-apiserver"; when "kube-controller-manager/kube-controller-manager" then "kube:kube-controller-manager"; when "autoscaler/kube-dns-autoscaler" then "kube:kube-dns-autoscaler"; when "kube-proxy/kube-proxy" then "kube:kube-proxy"; when "kube-scheduler/kube-scheduler" then "kube:kube-scheduler"; when "kubedns/kube-dns" then "kube:kubedns"; else nil end;) || "kube:container:#{record["container_name"]}"}
        </record>
      </filter>

      # = filters for non-container log files =
      <filter file.kube:kubelet file.kube:kube-proxy file.kube:flanneld>
        @type record_transformer
        enable_ruby
        <record>
          sourcetype ${tag_suffix[1]}
        </record>
      </filter>
      <filter wineventlog>
        @type record_transformer
        <record>
          sourcetype "kube:docker"
        </record>
      </filter>

      # = filters for monitor agent =
      <filter monitor_agent>
        @type record_transformer
        enable_ruby
        <record>
          source ${"namespace:#{ENV['MY_NAMESPACE']}/pod:#{ENV['MY_POD_NAME']}"}
          sourcetype ${"fluentd:monitor-agent"}
        </record>
      </filter>

      # = add cluster name to everything =
      <filter **>
        @type record_transformer
        <record>
          cluster_name "#{ENV['CLUSTER_NAME']}"
        </record>
      </filter>

      # = output =
      <match **>
        @type splunk_hec
        protocol https
        hec_host MY-SPLUNK-HOST
        hec_port 8088
        hec_token "#{ENV['SPLUNK_HEC_TOKEN']}"
        host "#{ENV['NODE_NAME']}"
        source_key source
        sourcetype_key sourcetype
        insecure_ssl true
        <fields>
          pod
          namespace
          container_name
          container_id
          cluster_name
        </fields>
        <buffer>
          @type memory
          chunk_limit_records 100000
          chunk_limit_size 200m
          flush_interval 5s
          flush_thread_count 1
          overflow_action block
          retry_max_times 3
          total_limit_size 600m
        </buffer>
        <format monitor_agent file.kube:kubelet file.kube:kube-proxy file.kube:flanneld>
          @type json
        </format>
        <format>
          # we just want to keep the raw logs, not the structure created by docker or journald
          @type single_value
          message_key log
          add_newline false
        </format>
      </match>
    </label>
